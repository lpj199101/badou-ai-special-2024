from keras import backend as K


class Config:

    def __init__(self):
        """
        `self.anchor_box_scales` 和 `self.anchor_box_ratios` 是在目标检测中用于定义锚框的参数。
            `self.anchor_box_scales` 表示锚框的尺度或大小。它定义了一组不同的尺寸，用于检测不同大小的目标。每个尺度值表示锚框的边长。
            `self.anchor_box_ratios` 表示锚框的比例或宽高比。它定义了一组不同的宽高比，用于检测具有不同形状的目标。每个比例值表示锚框的宽度与高度的比值。
        这些参数的意义在于，通过设置不同的尺度和比例，可以生成多种不同形状和大小的锚框。这些锚框会在图像上进行滑动窗口搜索，以检测可能存在的目标。
        在训练目标检测模型时，这些锚框会与真实目标进行匹配，以计算损失函数并优化模型参数。通过调整锚框的尺度和比例，可以更好地适应不同大小和形状的目标，提高检测的准确性和召回率。
        此外，选择合适的锚框尺度和比例也需要考虑数据集的特点和目标的分布情况。通常需要进行实验和调优，以找到最适合的参数设置。
        """
        self.anchor_box_scales = [128, 256, 512]  # 锚框的尺度，即锚框的大小
        self.anchor_box_ratios = [[1, 1], [1, 2], [2, 1]]  # 锚框的比例，即锚框的宽高比

        '''
        `self.rpn_stride` 是区域提议网络（RPN）中的一个参数，它表示在特征图上生成锚框时的步长。
            在目标检测中，RPN 用于在输入图像的特征图上生成一系列的锚框，这些锚框可能包含目标。`rpn_stride` 决定了锚框在特征图上的间隔或密度。
            具体来说，`rpn_stride` 的值表示在特征图的每个维度上，锚框的中心位置移动的距离。较小的 `rpn_stride` 值会导致在特征图上生成更密集的锚框，从而增加检测的精度，但也会增加计算量和内存消耗。
                     较大的 `rpn_stride` 值会生成较稀疏的锚框，减少计算量，但可能会错过一些小目标。
            选择合适的 `rpn_stride` 值需要在精度和计算效率之间进行权衡。通常，需要根据具体的应用场景、数据集和模型架构来进行实验和调整，以找到最适合的步长值。
        例如，如果目标较小或需要更高的检测精度，可以选择较小的 `rpn_stride` 值。如果计算资源有限或对实时性要求较高，可以选择较大的 `rpn_stride` 值。
        总的来说，`self.rpn_stride = 16` 表示在特征图上每隔 16 个像素生成一个锚框。这个值是在模型训练和优化过程中确定的，以平衡检测精度和计算效率。
        '''
        self.rpn_stride = 16  # 区域提议网络（RPN）的步长，用于在特征图上生成锚框

        '''
        `self.num_rois = 32` 表示在目标检测中，模型将从区域提议网络（RPN）生成的候选区域中选择 32 个感兴趣区域（ROI）进行后续的处理和预测。
            ROI 是指在图像中可能包含目标的区域。RPN 会生成一系列的候选区域，然后通过一些筛选机制（如重叠度、得分等）选择出一定数量的 ROI。
            选择合适的 `num_rois` 值取决于多个因素，如数据集的大小、目标的数量和分布、计算资源等。较小的 `num_rois` 值可以减少计算量，但可能会丢失一些潜在的目标；较大的 `num_rois` 值可以增加检测到目标的机会，但会增加计算成本。
        在实际应用中，通常需要通过实验和调优来确定最佳的 `num_rois` 值。可以尝试不同的数值，并评估模型在检测性能、准确性和效率方面的表现，以找到最适合具体任务的设置。
        此外，还可以结合其他参数和技术，如非极大值抑制（NMS）、多尺度检测等，来进一步优化目标检测的效果。
        '''
        self.num_rois = 32  # 感兴趣区域（ROI）的数量，即 RPN 生成的候选区域的数量

        self.verbose = True  # 是否打印详细信息
        self.model_path = "logs/model.h5"  #模型的保存路径

        '''
        `self.rpn_min_overlap` 和 `self.rpn_max_overlap` 是在目标检测中用于筛选锚框的重叠度阈值。
            `self.rpn_min_overlap` 表示区域提议网络（RPN）中最小的重叠度要求。当一个锚框与真实目标的重叠度大于或等于这个阈值时，该锚框会被保留下来，作为可能包含目标的候选框。
                                   这个参数的作用是控制 RPN 生成的锚框的质量，避免过多的低质量锚框。
            `self.rpn_max_overlap` 表示 RPN 中最大的重叠度要求。当一个锚框与真实目标的重叠度小于这个阈值时，该锚框会被保留下来，作为可能包含目标的候选框。
                                   这个参数的作用是控制 RPN 生成的锚框的数量，避免过多的冗余锚框。    
        通过调整这两个参数的值，可以平衡锚框的质量和数量，从而影响目标检测的性能。较大的重叠度阈值会导致较少的锚框被保留，但可能会提高检测的准确性；较小的重叠度阈值会保留更多的锚框，但可能会增加误检的数量。
        在实际应用中，通常需要根据具体的数据集和任务需求，通过实验来找到最适合的重叠度阈值。这可以通过评估不同参数设置下的检测性能指标（如准确率、召回率等）来进行调整和优化。
        '''
        self.rpn_min_overlap = 0.3  # RPN 中最小的重叠度，用于筛选锚框
        self.rpn_max_overlap = 0.7  # RPN 中最大的重叠度，用于筛选锚框

        '''
        通过调整这两个参数的值，可以控制分类器对候选区域的筛选标准，从而影响目标检测的准确性和召回率。在实际应用中，需要根据具体的数据集和任务需求，通过实验来确定最优的参数值。
           self.classifier_min_overlap 表示分类器中最小的重叠度阈值。当一个候选区域与真实目标的重叠度大于或等于这个阈值时，该候选区域才会被保留下来，作为可能包含目标的区域。
                                       这个参数的作用是过滤掉与目标重叠度过小的候选区域，以减少误检的数量。
           self.classifier_max_overlap 表示分类器中最大的重叠度阈值。当一个候选区域与真实目标的重叠度小于这个阈值时，该候选区域才会被保留下来，作为可能包含目标的区域。
                                       这个参数的作用是过滤掉与目标重叠度过大的候选区域，以避免重复检测同一个目标。
        '''
        self.classifier_min_overlap = 0.1  # 分类器中最小的重叠度，用于筛选 ROI
        self.classifier_max_overlap = 0.5  # 分类器中最大的重叠度，用于筛选 ROI

        '''
        `classifier_regr_std` 是一个列表，其中包含四个值，分别对应于边界框回归的四个坐标（x, y, w, h）的标准差。
            在目标检测中，边界框回归是用于预测目标的精确位置和大小的重要步骤。通过回归四个坐标的值，可以对预测的边界框进行调整，使其更接近真实的目标边界框。
            每个坐标的标准差表示了该坐标的不确定性或误差范围。较大的标准差表示该坐标的预测值可能有较大的波动，而较小的标准差表示预测值相对更稳定。
        具体来说，`classifier_regr_std` 中的四个值通常是根据数据集和模型训练过程中的统计信息来确定的。这些值可以影响边界框回归的准确性和稳定性，通过调整它们可以优化模型的性能。  
        在实际应用中，选择合适的 `classifier_regr_std` 值需要进行实验和调优，以找到最适合特定数据集和任务的参数设置。这可以通过在训练过程中观察模型的性能，并根据需要进行调整来实现。
        '''
        self.classifier_regr_std = [8.0, 8.0, 4.0, 4.0]  # 分类器回归的标准差，用于计算回归损失(四个值，分别对应于边界框回归的四个坐标（x, y, w, h）的标准差)
